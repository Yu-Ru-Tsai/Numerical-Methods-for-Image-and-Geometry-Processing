function img_denoised = WhichModel(model_name, img_noisy, linear_solver_method, ...
    lambda, mu, alpha, OUTER_MIN_ITER, OUTER_MAX_ITER, OUTER_TOL, OUTER_ERROR, ...
    INNER_MAX_ITER, INNER_TOL)
switch model_name
    case '1-Norm'
        img_denoised = SplitBregman(img_noisy, linear_solver_method, ...
            lambda, mu, OUTER_MIN_ITER, OUTER_MAX_ITER, OUTER_TOL, OUTER_ERROR, ...
            INNER_MAX_ITER, INNER_TOL);
    case 'Isotropic'
        img_denoised = Isotropic(img_noisy, linear_solver_method, ...
            lambda, mu, OUTER_MIN_ITER, OUTER_MAX_ITER, OUTER_TOL, OUTER_ERROR, ...
            INNER_MAX_ITER, INNER_TOL);
    case 'Anisotropic'
        img_denoised = Anisotropic(img_noisy, linear_solver_method, ...
            lambda, mu, OUTER_MIN_ITER, OUTER_MAX_ITER, OUTER_TOL, OUTER_ERROR, ...
            INNER_MAX_ITER, INNER_TOL);
    case '2-Norm'
        img_denoised = Anisotropic2norm(img_noisy, linear_solver_method, ...
            mu, INNER_MAX_ITER, INNER_TOL);
    case '1&2-Norm'
        img_denoised = SplitBregman12norm(img_noisy, linear_solver_method, ...
            lambda, mu, alpha, OUTER_MIN_ITER, OUTER_MAX_ITER, OUTER_TOL, OUTER_ERROR, ...
            INNER_MAX_ITER, INNER_TOL);
    case '1->2-Norm'
        img_denoised = Anisotropic2norm(img_noisy, linear_solver_method, ...
            mu, INNER_MAX_ITER, INNER_TOL);
    case '2->1-Norm'
        img_denoised = SplitBregman(img_noisy, linear_solver_method, ...
            lambda, mu, OUTER_MIN_ITER, OUTER_MAX_ITER, OUTER_TOL, OUTER_ERROR, ...
            INNER_MAX_ITER, INNER_TOL);
    otherwise
        fprintf('Error Model Name');
end